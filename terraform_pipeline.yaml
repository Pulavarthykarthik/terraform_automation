trigger:
  branches:
    include:
    - main

variables:
  - group: daa-terraform

pool:
  vmImage: windows-latest
# resources:
#   repositories:
#     - repository: modules
#       type: git
#       name: Azure-Data-Enterprise-Platform/DEP-Terraform-iac-modules

stages:

  - stage: Static_code_Analysis
    displayName: Static Code Analysis Stage
    jobs:
      - job: ScanningCode
        displayName: Run Checkov
        steps:
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: 'pip3 install checkov'
            displayName: 'Installing Checkov'
          
          - powershell: |
              tree "$(System.DefaultWorkingDirectory)" /F
            displayName: 'Treeview of System.DefaultWorkingDirectory'
          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: |
                # mkdir checkov-report
                checkov -d /modules --skip-path ./*.json -o junitxml > TEST-checkov-report.xml
              workingDirectory: '$(System.DefaultWorkingDirectory)'
              
            displayName: 'Checkov Static Code Analysis'
          - powershell: |
              tree "$(System.DefaultWorkingDirectory)" /F
            displayName: 'Treeview of System.DefaultWorkingDirectory' 
          
          - task: PublishTestResults@2
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/TEST-*.xml'
              searchFolder: '$(System.DefaultWorkingDirectory)'
              testRunTitle: 'CheckOV Scan'
            displayName: 'Publish checkov Test Results'

  - stage: terraform_validate
    displayName: Prepare Terraform and Validate Code
    jobs:
      - job: terraform_validate_develop
        continueOnError: false
        steps:
          - task: TerraformInstaller@0
            displayName: Terraform Install
            inputs:
              terraformVersion: 'latest'
          # - task: InstallSSHKey@0
          #   displayName: 'Install SSH Key'
          #   inputs:
          #     knownHostsEntry: '$(remote_host)'
          #     sshPublicKey: '$(ssh_public_key)'
          #     sshPassphrase: '$(ssh_passphrase)'
          #     sshKeySecureFile: id_rsa

          - task: TerraformTaskV3@3
            displayName: Terraform init
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/azure_terraform/'
              commandOptions: '-var-file="qa.auto.tfvars"'
              backendServiceArm: '$(serviceconnection)' #check service connection
              backendAzureRmResourceGroupName: '$(backendresourcegroup)' # changed
              backendAzureRmStorageAccountName: '$(backendstorageaccount)' # changed
              backendAzureRmContainerName: '$(backendcontainer)'
              backendAzureRmKey: '$(statefilename)'
 
          - task: TerraformTaskV3@3
            displayName: Terraform Validate
            inputs:
              provider: 'azurerm'
              command: 'validate'
  - stage: terraform_plan
    dependsOn:
    - terraform_validate
    condition: succeeded('terraform_validate')
    jobs:
      - job: terraform_plan_develop
        steps: 
        - checkout: self
        - task: TerraformInstaller@0
          displayName: Terraform install
          inputs:
            terraformVersion: 'latest'
        # - task: InstallSSHKey@0
        #   displayName: 'Install SSH Key'
        #   inputs:
        #     knownHostsEntry: '$(remote_host)'
        #     sshPublicKey: '$(ssh_public_key)'
        #     sshPassphrase: '$(ssh_passphrase)'
        #     sshKeySecureFile: id_rsa
        #new things added for azure keyvault
        # - task: AzureKeyVault@1
        #   inputs:
        #     ConnectedServiceName: '$(serviceconnection)'
        #     keyVaultName: '$(keyvaultname)'
        #     secretsFilter: '*'
        #     runAsPreJob: false
        - task: TerraformTaskV3@3
          displayName: Terraform init
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/azure_terraform/'
            commandOptions: '-var-file="qa.auto.tfvars"' 
            backendServiceArm: '$(serviceconnection)' #change service connection name
            backendAzureRmResourceGroupName: '$(backendresourcegroup)' # changed
            backendAzureRmStorageAccountName: '$(backendstorageaccount)' # changed
            backendAzureRmContainerName: '$(backendcontainer)'
            backendAzureRmKey: '$(statefilename)'
             

        - task: TerraformTaskV3@3
          displayName: Terraform Plan
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)/azure_terraform/'
            commandOptions: '-var-file="qa.auto.tfvars"' # change
            environmentServiceNameAzureRM: '$(serviceconnection)' # change

  #Approval Stage

  - stage:  Approve_Deployment_QA
    displayName: Approval for creting the resources
    dependsOn: terraform_plan
    condition: succeeded('terraform_plan')
    jobs:
    - job: waitForValidation
      displayName: Wait for external validation
      pool: server
      timeoutInMinutes: 4320 # job times out in 3 days
      steps:
        - task: ManualValidation@0
          timeoutInMinutes: 4320 # task times out in 3 days
          inputs:
           notifyUsers: |
            $(notifyUsers)
           instructions: 'Please validate the names of the resources'
           onTimeout: 'reject'

  - stage: terraform_apply
    dependsOn:
    - Approve_Deployment_QA
    condition: and(succeeded('Approve_Deployment_QA'),succeeded('terraform_plan'))
    jobs:
      - job: terraform_apply_develop
        steps:
          - checkout: self
          - task: TerraformInstaller@0
            displayName: Terraform install
            inputs:
              terraformVersion: 'latest'
          # - task: InstallSSHKey@0
          #   displayName: 'Install SSH Key'
          #   inputs:
          #     knownHostsEntry: '$(remote_host)'
          #     sshPublicKey: '$(ssh_public_key)'
          #     sshPassphrase: '$(ssh_passphrase)'
          #     sshKeySecureFile: id_rsa
          #added keyvault
          # - task: AzureKeyVault@1
          #   inputs:
          #     ConnectedServiceName: '$(serviceconnection)'
          #     keyVaultName: '$(keyvaultname)'
          #     secretsFilter: '*'
          #     runAsPreJob: false

          - task: TerraformTaskV3@3
            displayName: Terraform init
            inputs:
              provider: 'azurerm'
              command: 'init'
              workingDirectory: '$(System.DefaultWorkingDirectory)/azure_terraform/'
              commandOptions: '-var-file="qa.auto.tfvars"' # changed
              backendServiceArm: '$(serviceconnection)' # change
              backendAzureRmResourceGroupName: '$(backendresourcegroup)' # changed
              backendAzureRmStorageAccountName: '$(backendstorageaccount)' # changed
              backendAzureRmContainerName: '$(backendcontainer)'
              backendAzureRmKey: '$(statefilename)'

          - task: TerraformTaskV3@3
            displayName: Terraform Plan
            inputs:
              provider: 'azurerm'
              command: 'plan'
              workingDirectory: '$(System.DefaultWorkingDirectory)/azure_terraform/'
              commandOptions: '-var-file="qa.auto.tfvars"' # change
              environmentServiceNameAzureRM: '$(serviceconnection)' # change
          
          - task: TerraformTaskV3@3
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: '$(System.DefaultWorkingDirectory)/azure_terraform/'
              commandOptions: >-
                -input=false -auto-approve
                -var-file="qa.auto.tfvars"
              environmentServiceNameAzureRM: '$(serviceconnection)' # change
          
        


               
  
  
    

  
  
    




      
    






